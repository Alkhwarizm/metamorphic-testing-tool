#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const yargs = require('yargs');
const TestExecutor = require('../src/core/TestExecutor.js');

yargs
    .usage('Usage: $0 <command> [options]')
    .command(
        'run', 
        'Run metamorphic tests in the directory.',
        function (yargs) {
            return yargs.options({
                'd': {
                    alias: 'directory',
                    default: 'tests',
                    describe: 'specifies metamorphic test directory to be run',
                    requiresArg: true,
                    nargs: 1
                },
                'f': {
                    alias: 'file',
                    describe: 'specifies metamorphic test file to be run',
                    requiresArg: true
                }
            })
        },
        runTest
    )
    .command(
        'add <path>',
        'Create new metamorphic test file with boilerplate in the specified path.',
        function (yargs) {
            return yargs.positional('path', {
                describe: 'path into which the new test will be created',
                requiresArg: true,
                normalize: true,
                nargs: 1
            })
        },
        initTest
    )
    .example('$0 run -d tests', 'Run all metamorphic tests in /tests directory.')
    .example('$0 run -f test.js', 'Run a metamorphic tests defined in test.js.')
    .demandCommand(1)
    .help('h')
    .alias('h', 'help')
    .argv;


function runTest(argv) {
    if (argv.f) {
        const filepath = path.join(process.cwd(), argv.f);
        const testReport = TestExecutor.execute(require(filepath).test);
        TestExecutor.displayTestReport(testReport);
    
    } else {
        const filepaths = fs.readdirSync(argv.d).map(file => {
            return path.join(process.cwd(), argv.d, file);
        });
    
        const tests = filepaths.map(file => require(file).test).reverse();
        const testReports = TestExecutor.executeAll(tests);
        TestExecutor.displayAllTestReport(testReports);
    }
}

function initTest(argv) {
    const source = path.join(__dirname, 'boilerplate.js');
    const dest = path.join(process.cwd(), argv.path);
    fs.copyFileSync(source, dest);
}
